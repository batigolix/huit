<?php

/**
 * @file
 * Contains sdv_mapeditor.module.
 */

use Drupal\Component\Serialization\Json;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Render\Element;

/**
 * Implements hook_theme().
 */
function sdv_mapeditor_theme() {
  return [
    'sdv_map' => [
      'render element' => 'elements',
    ],
    'gis_ia_edit_help' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for map template.
 */
function template_preprocess_sdv_map(&$variables) {
  $sdv_map = $variables['elements']['#sdv_map'];

  // Provides map ID for the template.
  $variables['node_id'] = $sdv_map->id();

  // Provides $content variable for template.
  $variables['content'] = [];
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  // Provides the color for the template.
  // @todo figure out if used.
  $uiterlijk = $sdv_map->getAppearance();

  // Provides the parameters with ot without layer definitions for the template.
  $parameters = $sdv_map->getParameters();
  if ($sdv_map->getLayers()) {
    $parameters .= $sdv_map->getLayers();
  }
  $variables['parms'] = $parameters;

  // Passes on layer server urls.
  $urls = \Drupal::config('sdv_mapeditor.settings')->get('urls');
  $variables['urls'] = $urls;

  // Provides folder name for the template.
  // @todo figure out what is used for.
  $variables['dwnld'] = __DIR__;
}

/**
 * Implements hook_form_alter().
 */
function sdv_mapeditor_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if ($form_id == 'sdv_map_add_form' || $form_id == 'sdv_map_edit_form') {

    // Toggles the parameters and layer definitions fields.
    $form['show'] = [
      '#type' => 'checkbox',
      '#title' => t('Show parameters and layer definitions'),
      '#weight' => 4,
    ];
    $form['gis_ia_layers']['#states'] = [
      'invisible' => [
        ':input[name="show"]' => ['checked' => FALSE],
      ],
    ];
    $form['gis_ia_params']['#states'] = [
      'invisible' => [
        ':input[name="show"]' => ['checked' => FALSE],
      ],
    ];

    // Sets name field on top.
    // @todo fix this in the entity class.
    $form['name']['#weight'] = -10;
    $form['description']['#weight'] = 0;

    // Attaches the sdv_gis_edit library (providing the gis ia edit form).
    $form['#attached']['library'][] = 'sdv_mapeditor/sdv_gis_edit';

    // Passes WMS XML file content as JavaScript variables;.
    $filehandler = \Drupal::service('sdv_mapeditor.filehandler');
    $form['#attached']['drupalSettings']['gis_ia']['wms'] = $filehandler->getWms();

    // Passes urls of map servers to the gis ia JavaScript.
    // @todo make more specific.
    $urls = \Drupal::config('sdv_mapeditor.settings')->get('servers');
    $form['#attached']['drupalSettings']['gis_ia']['urls'] = $urls;
  }
}

/**
 * Implements hook_library_info_alter().
 */
function sdv_mapeditor_library_info_build() {
  // Converts config to list of libraries.
  $config = \Drupal::config('sdv_mapeditor.settings');
  $libraries = [];
  $config_libraries = Json::decode($config->get('libraries'));
  foreach ($config_libraries as $key => $library) {
    $libraries[$key] = [
      'version' => $config->get('version'),
    ];
    if (isset($library['css'])) {
      foreach ($library['css'] as $css) {
        $libraries[$key]['css']['layout'][$css] = [];
      }
    }
    if (isset($library['js'])) {
      foreach ($library['js'] as $js) {
        $libraries[$key]['js'][$js] = [];
      }
    }
    if (isset($library['dependencies'])) {
      foreach ($library['dependencies'] as $dependency) {
        $libraries[$key]['dependencies'][] = $dependency;
      }
    }
  }
  return $libraries;
}

/**
 * Implements hook_entity_view().
 */
function sdv_mapeditor_entity_view(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display, $view_mode) {

  // Attaches map entity specific libraries.
  if ($entity->bundle() == 'sdv_map') {

    // Attaches the gis_ia library.
    $build['#attached']['library'][] = 'sdv_mapeditor/sdv_gis';

    // Attaches specific styling library.
    $appearance = $entity->getAppearance();
    $build['#attached']['library'][] = 'sdv_mapeditor/sdv_gis_' . $appearance;
  }
}
