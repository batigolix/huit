/* mapApp.js 
 | This code will generate a map with Highmaps.
 | @author Martino
 | @date April 2020
*/

var mapApp = {
  config: {
    lang: jQuery('html').attr('lang') || 'nl'
  }
};

// Get config and set as mapApp.config  
mapApp.getConfig = function () {
  jQuery.extend(true, mapApp.config, {
    root: '/media/corona',
    csv: { lineSeparator: '\r\n', colSeparator: ';' },
  })

  // For local developing
  if (location.host == 'regiobeeld.lndo.site') mapApp.config.root = 'https://data-app-regiobeeld.lndo.site/corona';

  // Get settings from data container attributes
  /* div#csvData data attributes (jQuery('#csvData').data())
    columns: "Totaal_gemeld;Ziekenhuisopname;BevAant;Totaal_gemeld_per_100000;Ziekenhuisopname_per_100000"
    value: "Ziekenhuisopname_per_100000"
    valueLabel: "Aantal per 100.000 inwoners"
  */
  // Get valueColumn from div#csvData.data().value if defined
  if (jQuery(mapApp.mapSettings.main.data.csvSelector).data().value != undefined) {
    mapApp.mapSettings.main.data.valueProp = jQuery(mapApp.mapSettings.main.data.csvSelector).data().value;
  }
  // Get dataColumns from div#csvData.data() if defined
  if (jQuery(mapApp.mapSettings.main.data.csvSelector).data().columns != undefined) {
    mapApp.mapSettings.main.data.tableColumns = jQuery(mapApp.mapSettings.main.data.csvSelector).data().columns.split(';');
  }

};

// Page load code ********************************************
mapApp.init = function ($) {
  //  Get app config
  mapApp.getConfig();

  // mapConfiguration to draw map with Highcharts
  // Parameters from mapSettings will be used to get the final configuration
  var mapConfig = {
    title: { text: mapApp.mapSettings.mapTitles.mapTitle },
    subtitle: { text: mapApp.mapSettings.mapTitles.mapSubtitle },
    colors: ['#ffffff', '#ffffd4', '#fee391', '#fec44f', '#fe9929', '#d95f0e', '#993404'],

    colorAxis: mapApp.mapSettings.colorAxis,
    // colors: mapApp.mapSettings.colorAxis.colors,
    series: [],
    chart: {
      description: mapApp.mapSettings.mapTitles.mapDescription,
      type: 'map',
      events: {
        // load: function () {
        //   var axis = this.colorAxis[0];
        //   // Disable LegendItemClick event on colorAxis
        //   $.each(axis.legendItems, function (i, item) {
        //     item.legendGroup.on('click', function (e) {
        //       return false;
        //     });
        //   });
        // }
      }
    },
    legend: {
      enabled: mapApp.mapSettings.mapTitles.legendTitle != undefined,
      title: { text: mapApp.mapSettings.mapTitles.legendTitle || Highcharts.defaultOptions.legend.text }
    },
    plotOptions: {
      // map: {
      //   tooltip: {
      //     // valueDecimals: mapApp.mapSettings.valueNotation.valueDecimals,
      //     // valueSuffix: mapApp.mapSettings.valueNotation.valueSuffix,
      //     // headerFormat: '',
      //     // pointformat: mapApp.mapSettings.point,
      //     formatter: function () {
      //       return nothing
      //     }
      //   }
      // }
    },
    exporting: {
      filename: mapApp.mapSettings.mapTitles.mapTitle
    }
  };

  console.log('mapApp.init - mapApp.mapSettings:', mapApp.mapSettings);

  // Create basic map with the background layers
  // Nederland and other background layers are used as contour layer. Drawn as last layers so border will be at top of other borders.
  $.each(mapApp.mapSettings.backgroundLayers, function (layerNo, layer) {

    // if (Highcharts.maps[layer.mapName] == undefined) {
    getMap(layer, false, { convert: true, format: layer.type });
    // } 

    mapConfig.series.push(
      {
        zIndex: layerNo + 4, // Offset to put background layers on top
        legendIndex: 1,
        name: layer.name,
        data: Highcharts.maps[layer.mapName],
        type: 'mapline', // Always plot as line
        color: layer.borderColor,
        lineWidth: layer.lineWidth,
        showInLegend: (layer.name != 'Gemeente' && layer.name != 'Nederland'),
      }
    );
  });

  //Load CSV data (slice result of array to skip headers)
  if (mapApp.mapSettings.main.data.csvSelector != undefined) {
    csvDataArr = GetDataFromElement(mapApp.mapSettings.main.data.csvSelector);
    console.log('csv Data from Element:', csvDataArr.length, csvDataArr);
  } else {
    csvDataArr = GetData(mapApp.mapSettings.main.data.url)
    console.log('csv Data from file:', csvDataArr.length, csvDataArr);
  }


  // Set dataColumns from csv headers if dataColumns == undefined
  if (mapApp.mapSettings.main.data.dataColumns == undefined) {
    mapApp.mapSettings.main.data.dataColumns = csvDataArr[0];
  }

  //Convert to Array of objects
  mapData = ConvertDataArrayToArrayOfObjects(csvDataArr.slice(1), mapApp.mapSettings.main.data);

  // Get datum from csv id=-2 and remove from array
  var objUpdated = mapData.filter(function (item) { return item[mapApp.mapSettings.main.data.key] == "-2"; })[0];
  // mapApp.config.updated = (objUpdated != undefined ? objUpdated.name : '');
  if (objUpdated != undefined) {
    mapConfig.subtitle.text += ', ' + objUpdated.name;
  }
  // Remove item with id = -1
  mapData = mapData.filter(function (item) { return item[mapApp.mapSettings.main.data.key] != "-2"; });

  // Remove item with id = -1
  mapData = mapData.filter(function (item) { return item[mapApp.mapSettings.main.data.key] != "-1"; });

  // Get dataClasses
  if (jQuery('div#dataClasses').length > 0) {
    var strDataClasses = jQuery('div#dataClasses').text();

    if (strDataClasses.substr(0, 4).trim().substr(0, 1) == '[') { // JSON array
      mapConfig.colorAxis.dataClasses = JSON.parse(strDataClasses);
      console.log('dataclasses - JSON', mapConfig.colorAxis.dataClasses)
    } else { // csv array
      var arrDataClasses = mapApp.parseCSV(strDataClasses),
        colNames = arrDataClasses.slice(0, 1)[0], arrDataClasses = arrDataClasses.slice(1), objClass = {};
      mapConfig.colorAxis.dataClasses = []

      jQuery.each(arrDataClasses, function (index, dataClass) {
        objClass = {}; // reset
        jQuery.each(dataClass, function (index, item) {
          if (item.length > 0) objClass[colNames[index]] = item;
        });
        mapConfig.colorAxis.dataClasses.push(objClass);
      });

      console.log('dataclasses - CSV', mapConfig.colorAxis.dataClasses)
    }
  }

  // Initiate the chart and load theme
  var mapContainer = mapApp.mapSettings.mapContainer || 'mapContainer';
  mapApp.hc.setTheme();
  var mapChart = Highcharts.mapChart(mapContainer, mapConfig, mapApp.chartCreateCallback);

  var mapSeries = {
    visible: true,
    nullInteraction: true,
    legendIndex: 0,
    zIndex: 1,
    name: mapApp.mapSettings.main.map.name, // 'Positieve tests', //
    description: mapApp.mapSettings.mapTitles.mapDescription,
    type: 'map',
    data: mapData, // data converted to array of objects
    // mapData: mainMap,
    joinBy: [mapApp.mapSettings.main.map.key, mapApp.mapSettings.main.data.key],
    keys: mapApp.mapSettings.main.data.tableColumns || mapApp.mapSettings.main.data.dataColumns
  }
  if (Highcharts.maps[mapApp.mapSettings.main.map.mapName] != undefined) {
    mapSeries.mapData = Highcharts.maps[mapApp.mapSettings.main.map.mapName];
    mapChart.addSeries(mapSeries);
  } else {
    // Load main map asynchronously
    $.ajax(mapApp.mapSettings.main.map.url, {
      dataType: 'json',
      async: true,
      error: ajaxError,
      success: function (mainMap) {
        mapSeries.mapData = mainMap;
        mapChart.addSeries(mapSeries);
      }
    });
  }

};

mapApp.chartCreateCallback = function (chart) {
  //Remove svg.title element
  chart.title.textStr = '';
};

mapApp.parseCSV = function (strCsv, colSeparator) {
  var arrCsv = [], lines = [], columnCount = 0;
  colSeparator = colSeparator || mapApp.config.csv.colSeparator;

  // Which line separator? Windows (CR LF)= '\r\n\'; Unix/OS X = '\r';  Mac (CR) = '\n'
  if (strCsv.indexOf(mapApp.config.csv.lineSeparator) == -1) {
    mapApp.config.csv.lineSeparator = '\n';
    if (strCsv.indexOf(mapApp.config.csv.lineSeparator) == -1) {
      mapApp.config.csv.lineSeparator = '\r';
    }
  }
  // Split the lines
  lines = strCsv.split(mapApp.config.csv.lineSeparator);

  // Iterate over the lines
  jQuery.each(lines, function (lineNo, line) {

    line = line.trim(); // trim before checking emptiness
    if (line.length > 0) {
      arrCsv.push(line.split(colSeparator));
    }
  })

  return arrCsv;
};

/**
 * Drupal way of document ready
 */
(function ($) {
  $(function () {
    // Initialize map
    mapApp.init(jQuery);
  });
})(jQuery);

/*
 | Functions for data and feature manipulation
 | @author Martino
 | @date March 2020
*/

/*
  GetData will download a csv data file from given url
*/
function GetData(url, getHeaders, columnSeparator) {
  if (url === getHeaders) getHeaders = true;
  columnSeparator = columnSeparator || ';';

  var arrData = [];

  jQuery.ajax(url, {
    dataType: 'text',
    async: false,
    success: function (data) {
      var lineSeparator = '\r\n',
        lines = [],
        columnCount = 0;

      // Which line separator? Windows (CR LF)= '\r\n\'; Unix/OS X = '\r';  Mac (CR) = '\n'
      if (data.indexOf(lineSeparator) == -1) {
        lineSeparator = '\n';

        if (data.indexOf(lineSeparator) == -1) {
          lineSeparator = '\r';
        }
      }

      // Split the lines
      lines = data.split(lineSeparator);

      // Iterate over the lines and add categories or series
      jQuery.each(lines, function (lineNo, line) {
        var items = line.split(columnSeparator);
        var dataRow = [];

        // Get number of Cols from first row
        if (lineNo == 0) {
          columnCount = items.length
        }

        // header line may contain headers; only retrieved if getHeaders = true
        if (lineNo == 0 && getHeaders) {
          jQuery.each(items, function (itemNo, item) {
            dataRow.push(item);
          });

          //Push row to data array
          arrData.push(dataRow);

        } else if (items.length == columnCount) {
          // the rest of the lines contain data
          jQuery.each(items, function (itemNo, item) {
            dataRow.push((item));
          });

          //Push row to data array
          arrData.push(dataRow);

        } else {
          console.log('CSV data row ' + lineNo + ' skipped: ' + items);
        }
      });
    },
    error: function (jqXHR, textStatus, errorThrown) {
      alert(textStatus + ' loading "' + url + '" -> ' + errorThrown);
    }
  });

  return arrData;

};

/*
  GetData will download a csv data file from given url
*/
function GetDataFromElement(selector, lineSeparator, columnSeparator) {
  lineSeparator = '\r\n', columnSeparator = columnSeparator || ';';

  var csv = jQuery(selector).text(), arrData = [], lines = [];

  // Which line separator? Windows (CR LF)= '\r\n\'; Unix/OS X = '\r';  Mac (CR) = '\n'
  if (csv.indexOf(lineSeparator) == -1) {
    lineSeparator = '\n';
    if (csv.indexOf(lineSeparator) == -1) {
      lineSeparator = '\r';
    }
  }
  // Split the lines
  lines = csv.split(lineSeparator);

  // Iterate over the lines and add categories or series
  jQuery.each(lines, function (lineNo, line) {
    if (line.length > 0) {

      arrData.push(line.split(columnSeparator));
    }
  });

  return arrData;
};

/*
  Convert array to object with properties given
  - arrData: two dimensional array
  -
*/
function ConvertDataArrayToArrayOfObjects(arrData, dataSettings) {
  // dataSettings.dataColumns, dataSettings.drilldownKey, dataSettings.tableNameProp
  // console.log('drilldownKey: ');console.log(drilldownKey);
  if (dataSettings.tableNameProp == undefined) dataSettings.tableNameProp = 0;
  if (dataSettings.valueProp == undefined) dataSettings.valueProp = 'value';

  // map columns in dataColumns AND [category, name, value] to properties
  var convertedArray = jQuery.map(arrData,
    function (dataPoint, index) {
      var arr = {};

      jQuery.each(dataSettings.dataColumns, function (index, dataColumn) {
        var item = dataPoint[index];
        arr[dataColumn] = (item != '') ? item : null;

        if (item != undefined && jQuery.isNumeric(item.charAt(0))) {
          arr[dataColumn] = parseFloat(item.replace(',','.'));
        } 
      });
      // arr['x'] = arr[dataSettings.nameProp];
      arr['category'] = arr[dataSettings.nameProp];
      arr['name'] = arr[dataSettings.nameProp];
      arr['value'] = arr[dataSettings.valueProp];
      return arr;

    });

  return convertedArray;
}

/*
  Filter array of data object
  features: collection of features
  filter:   object with filter.property with filter.value
*/
function FilterData(dataArr, filter) {
  // example: filter = { property: 'GM_CODE', value: 'GM0014' }
  filteredArr = jQuery.grep(dataArr, function (point) {
    return point[filter.property] == filter.value;
  });

  return filteredArr;
}

/*
  features: collection of features
  filter:   object with filter.property with filter.value
*/
function FilterFeatures(features, filter) {

  // find corresponding feature
  var filteredFeatures = jQuery.map(features,
    function (feature, index) {
      // Test for filter AND existing geometry
      if (feature.properties[filter.property] == filter.value && feature.geometry !=
        null) {
        if (feature.name === undefined) feature.name = feature.properties[
          filter.property];
        return feature;
      } else {
        return null;
      }
    });

  return filteredFeatures;
}

/*
  Test features for valid geometry
*/
function InvalidFeatures(features) {
  var invalidFeatures = jQuery.map(features,
    function (feature) {
      // Test NULL geometry
      if (feature.geometry == null) {
        return feature;
      } else {
        return null;
      }
    });

  return invalidFeatures;

}

/*
  Helper function to save JSON object as text file
*/
function downloadObjectAsJSON(jsonObject) {

  var data = "text/json;charset=utf-8," + encodeURIComponent(JSON.stringify(
    jsonObject));

  var a = document.createElement('a');
  a.href = 'data:' + data;
  a.download = 'data.json';
  a.innerHTML = 'download JSON';

  jQuery('.container').append(a);

}

/*
  Download a geojson file using ajax and optionally convert with H.geojson
  - mapSettings: settings containing name, url
  - blnAsync: optional boolean to force synchronous download
  - conversionSetting: Settings for conversion:
      convert: boolean
      format: map, mapline or mappoint
*/
function getMap(mapSettings, blnAsync, conversionSetting) {
  var defaultConversionSettings = {
    convert: true,
    format: 'map'
  };
  // If sync setting not given, set to default value
  if (blnAsync == undefined) blnAsync = true;
  // if no conversion settings are given, use deafult settings
  if (conversionSetting == undefined) {
    conversionSetting = defaultConversionSettings
  } else {
    // if only boolean given, change to object with format
    if (conversionSetting == true) {
      conversionSetting = defaultConversionSettings
    }
  }

  // jsonP call?
  var jsonP = mapSettings.url.indexOf('outputFormat=text/javascript');

  // Download the map if not yet downloaded
  if (Highcharts.maps[mapSettings.mapName] == undefined) {
    jQuery.ajax(mapSettings.url + ((jsonP > 0) ?
      '&format_options=callback:jsonpCallback' : ''), {
      async: blnAsync,
      dataType: (jsonP > 0) ? 'jsonp' : 'json',
      jsonpCallback: 'jsonpCallback',

      error: function (jqXHR, textStatus, errorThrown) {
        alert(textStatus + ' loading map "' + mapSettings.url + '" -> ' +
          errorThrown);
      },
      success: function (map) {
        // Optionally convert map
        if (conversionSetting.convert) {
          Highcharts.maps[mapSettings.mapName] = Highcharts.geojson(map,
            conversionSetting.format);
        } else {
          Highcharts.maps[mapSettings.mapName] = map;
        }
      }
    });
  } else {
    // Optionally convert existing map
    if (conversionSetting.convert || Highcharts.maps[mapSettings.mapName].type!=undefined) {
      Highcharts.maps[mapSettings.mapName] = Highcharts.geojson(Highcharts.maps[
        mapSettings.mapName], conversionSetting.format);
    }
  }
}

/*
  Function to display ajax errors
*/
function ajaxError(jqXHR, textStatus, errorThrown) {
  alert(textStatus + ' loading map "' + mapApp.mapSettings.main.map.url + '" -> ' +
    errorThrown);
}

/*
 | Settings for a map
 | @author Martino
 | @date March 2020
 | 
 | NB Settings are CASE-sensitive !!
 | Following settings can be set:
 | - General like mapTitle, -Description, -Container
 | - main map and data
 | - backgroundlayers
 | - valueNotation like valueDecimals and valueSuffix
 - 
*/

mapApp.mapTitles = {
  nl: {
    mapTitle: 'Coronavirus (COVID-19) incidentie',
    mapSubtitle: 'Per gemeente (waar de patiënt woont)',
    mapDescription: 'Kaart met per gemeente Coronavirus (COVID-19) incidentie',
    seriesDescription: 'Aantal per 100.00 inwoners', // Hidden description for screen readers
    legendTitle: 'Aantal per 100.00 inwoners'
  },
  en: {
    mapTitle: 'Coronavirus (COVID-19) incedence',
    mapSubtitle: 'Per residence county',
    mapDescription: 'Map with Coronavirus (COVID-19) incedence per residence county',
    seriesDescription: 'Count per 100.000 residents', // Hidden description for screen readers
    legendTitle: 'Count per 100.000 residents'
  }
}
// Read titles from Page?
if(jQuery('div#mapTitles').length > 0){
  mapApp.mapTitles = JSON.parse(jQuery('div#mapTitles').text());
}

mapApp.mapSettings = {
  mapTitles: mapApp.mapTitles[mapApp.config.lang],
  
  mapContainer: 'mapContainer', // id of html (div) element to draw map in (optional)

  chart: {
    title: 'Aantal Coronavirus (COVID-19)-meldingen',
    dataColumns: ['Aantal']
  },
  colorAxis: {
    dataClassColor: 'category',
    dataClasses: [
      { "name": "0", "to": 1 },
      { "name": "1 - 5", "from": 1, "to": 5 },
      { "name": "5 - 10", "from": 5, "to": 10 },
      { "name": "10 - 20", "from": 10, "to": 20 },
      { "name": "20 - 30", "from": 20, "to": 30 },
      { "name": ">30", "from": 30 }
    ]
  },
  main: {
    map: {
      name: 'Aantal',
      mapName:'gemeente', // name in Highcharts.maps
      url: mapApp.config.root + '/shapes/gemeente-2019.geojson',
      key: 'gemnr', // Key for the joinBy property to map data to map shapes
      nameProp: 'Gemeente', // Property in geojson to use in tooltip etc as the name property of the shape
    },
    // Gemnr;Gemeente;Totaal_gemeld;Ziekenhuisopname;BevAant;Totaal_gemeld_per_100000;Ziekenhuisopname_per_100000
    data: {
      csvSelector: 'div#csvData', // jQuery selector to get elemant with csv data
      // url: mapApp.config.root + '/data/corona.csv', // relatieve url van csv data bestand ( separator: ',' en decimal point '.'
      // dataColumns: [id;Gemeente;Indicator;Aantal], // OPTIONAL - dataColumns given should be at beginning of line in the correct order. If dataColums prop is MISSING, all columns of csv data will be read and headers in csv file will be uses as column name.
      key: 'Gemnr', // Key for the joinBy property to map data to map shapes
      nameProp: 'Gemeente', // Property csv tot use as nameProp in csv export and view table 
      // This prop is also used as first column in csv export and view table
      valueProp: 'Ziekenhuisopname_per_100000', // [OPTIONAL] Default is 'value'
      tableColumns: ['Ziekenhuisopname_per_100000','Ziekenhuisopname','Totaal_gemeld'], // ,'Totaal_gemeld_per_100000'], // [OPTIONAL] Columns to use in csv export and view table 
      chartKey: 'Gemnr'
    }
  },
  // backgroundLayers are added in order of appearance. They will appear in legend, accept for Nederland. LineWidth can be set for each layer
  backgroundLayers: [
    {
      name: 'GGD-regio\'s',
      mapName:'ggd', // name in Highcharts.maps
      url: mapApp.config.root + '/shapes/ggd_2019.geojson',
      type: 'map', // featuretype as in the Geojson
      lineWidth: 1.5,
      borderColor: '#6e6e6e',
      zIndex: 2
    },
    {
      name: 'Nederland',
      mapName:'nl', // name in Highcharts.maps
      url: mapApp.config.root + '/shapes/connl5_19.geojson',
      type: 'mapline', // featuretype as in the Geojson
      lineWidth: 1.5,
      borderColor: 'black',
      zIndex: 2
    }
  ],
  // Notation of values in tooltip etc
  valueNotation: {
    valueDecimals: 1,
    valueSuffix: ''
  }
}

/*
 | Highcharts theme maps
 | @author Martino
 | @date March 2020
  
  RIVM RHS colors:
    $yellow:                    #f9e11e
    $yellow-light:              #fdf6bb
    $yellow-lightest:           #fefbdd
 */

// mapApp.hc already defined?
// if(mapApp.hc != undefined) mapApp.hc={};
mapApp.hc = mapApp.hc || {};
// Set language for Highcharts theme depending on html.lang
mapApp.hc.translation = {
  nl: {
    decimalPoint: ',',
    thousandsSep: '.',
    loading: "Aan het laden...",
    zoomIn: 'Inzoomen',
    zoomOut: 'Uitzoomen',
    zoomReset: 'Reset zoom',
    resetZoomTitle: "Resetten zoom niveau", 
    contextButtonTitle: 'Kaart download menu',
    printChart: 'Kaart afdrukken',
    downloadPNG: 'PNG afbeelding downloaden',
    downloadJPEG: 'JPEG afbeelding downloaden',
    downloadPDF: 'PDF document downloaden',
    downloadSVG: 'SVG afbeelding downloaden',
    downloadCSV: 'CSV downloaden',
    downloadXLS: 'XLS downloaden',
    viewData: 'Tabel tonen'
  },
  en: {
    decimalPoint: ".",
    thousandsSep: " ", 
    loading: "Loading...", 
    zoomIn: "Zoom in", 
    zoomOut: "Zoom out",
    zoomReset: 'Reset zoom',
    resetZoomTitle: "Reset zoom level 1:1", 
    contextButtonTitle: "Chart download menu", 
    printChart: "Print chart", 
    downloadPNG: "Download PNG image", 
    downloadJPEG: "Download JPEG image", 
    downloadPDF: "Download PDF document", 
    downloadSVG: "Download SVG vector image", 
    downloadCSV: "Download CSV", 
    downloadXLS: "Download XLS", 
    viewData: "View data table"
  }
};

/*
  Set Highcharts theme and optionally load it
*/
mapApp.hc.setTheme = function(){

  mapApp.hc.theme = {
    lang: mapApp.hc.translation[mapApp.config.lang],
    chart: {
      style: {
        fontFamily: 'RijksoverheidSans, verdana, serif'
      },
      borderWidth: 0,
      animation: false,
      height: 600,
      // chart spacing and margins see: http://www.highcharts.com/docs/chart-design-and-style/design-and-style
      spacing: [10, 10, 15, 0],
      margin: [69, 5, 5, 79],
      marginLeft: 0,
      // Explicitly tell the width and height of a chart
      // width: 495,
      // height: 526,
      events: {
        load: function () {
          var thischart = this, yAxis = thischart.yAxis[0];
  
          // automatically positioning yAxis.axisTitle (http://jsfiddle.net/kL5md/21/)
          if (thischart.options.chart.type != 'bar' && yAxis.axisTitle != undefined) {
            var bbWidth = yAxis.axisTitle.getBBox();
            yAxis.update({
              title: {
                offset: -bbWidth.width
              }
            });
          }
        },
  
        // load event defined in chartTheme and mapTheme
        beforePrint: function () {
          jQuery('.highcharts-button').hide();
        },
        afterPrint: function () {
          jQuery('.highcharts-button').show();
        },
        render: function () {
          //Remove svg.title element
          jQuery('svg > title:first-child').remove();
        }
      }
    },
    title: {
      style: {
        color: '#000000',
        // 'background-color': '#FFFFFF', // only works if useHTML
        fontSize: '18px',
        fontWeight: 'bold',
        lineHeight: 17 // lineHeight = fontSize * 0.9
      },
      align: 'left',
      margin: 0,
      x: 1
      //useHTML: true,
    },
    subtitle: {
      style: {
        color: '#666666',
        fontSize: '12px',
        fontWeight: 'normal',
        lineHeight: 12 // lineHeight = fontSize * 1
      },
      align: 'left',
      x: 1
    },
    legend: {
      title: {
        style: {
          fontSize: '12px',
          fontWeight: 'normal'
        }
      },
      layout: 'vertical',
      align: 'left',
      verticalAlign: 'top',
      padding: 0,
      x: 2,
      y: 70,
      itemStyle: {
        fontSize: '11px',
        fontWeight: 'normal',
        width: 150,
        textOverflow: 'none',
        cursor: 'default'
      },
      itemMarginBottom: 2,
      maplineMarginTop: 20,
      maplineMarginLeft: - 30,
      itemBorderColor: '#6e6e6e', // Custom props for drilldown maps
      itemBorderWidth: .5,        // Custom props for drilldown maps
      // backgroundColor: 'rgba(255,255,255,0.9)',
      squareSymbol: false, // if true: height = width 
      symbolRadius: 0, // if Radius = Height/2 the symbol will be a circle
      symbolHeight: 13,
      symbolWidth: 25
    },
    tooltip: {
      // headerFormat: '<strong><large>{point.key}</large></strong><br>',
      // pointFormat: '<span style="color:{point.color}">\u25A0</span> {series.name}: <b>{point.y}</b><br/>',
      valueDecimals: 1,
      valueSuffix: '',
      headerFormat: '',
      formatter: function () {
        if (this.key != undefined) {
          var noDataLabel = 0;
          return '<b>' + this.key + '</b>' + ': '
            + ((this.point.value != -1 && this.point.value != undefined) ? Highcharts.numberFormat(this.point.value, this.series.chart.options.tooltip.valueDecimals)
              + (this.series.chart.options.tooltip.valueSuffix || '') : noDataLabel);
        } else {
          return false
        }
      },
      //   formatter: function (tooltip) {
      //     if (this.point.isNull) {
      //         return 'Null';
      //     }
      //     // If not null, use the default formatter
      //     return tooltip.defaultFormatter.call(this, tooltip);
      // }
      shadow: false,
      padding: 5,
      borderWidth: 2,
      borderColor: '#6e6e6e',
      borderRadius: 10,
      backgroundColor: 'rgba(255,255,255,0.8)'
    },
    plotOptions: {
      map: {
        nullColor: 'white',
        borderWidth: 0.9,
        states: {
          hover: {
            color: null, // Setting to null will keep original fill color
            brightness: 0,
            borderColor: 'rgba(255,153,0, 0.5)', //'orange'
            borderWidth: '3px'
          },
          select: {
            color: null, // Setting to null will keep original fill color
            brightness: 0,
            borderColor: 'rgba(255,153,0, 0.5)', //'orange'
            borderWidth: '3px'
          }
        }
      },
      mapline: {
        allowPointSelect: false,
        enableMouseTracking: false,
        colorAxis: false, // Set to false to create own legend item in stead of connecting up to colorAxis 
        includeInCSVExport: false // Do not include exporting options like csv, viewData 
      },
      series: {
        animation: { duration: 0 },
        allowPointSelect: true,
        events: {
          legendItemClick: function (e) {
            e.preventDefault();
          }
        }
      }
    },
    mapNavigation: {
      enabled: true,
      enableDoubleClickZoom: true,
      buttons: {
        zoomIn: {
          text: '+',
          y: -18
        },
        zoomReset: {
          text: '⦾',
          y: 5,
          onclick: function () {
            this.zoomOut();
          }
        },
        zoomOut: {
          text: '–',
          y: 28
        }
      },
      buttonOptions: {
        alignTo: 'spacingBox',
        align: 'left',
        verticalAlign: 'bottom',
        x: 8,
        y: 20,
        width: 14,
        height: 20,
        padding: 4,
        style: {
          fontFamily: 'Verdana',
          fontSize: '15px',
          fontWeight: 'bold',
          lineHeight: 15
        },
        theme: {
          'stroke-width': 1,
          'text-align': 'left',
          fill: 'rgba(255,255,255,0.8)',
        }
      },
    },
    credits: {
      enabled: true,
      text: 'RIVM',
      href: 'https://www.rivm.nl',
      position: {
        align: 'left',
        verticalAlign: 'bottom',
        x: 0,
        y: 0
      },
      style: {
        fontSize: '11px',
        fontWeight: 'bold',
        color: '#6e6e6e'
      }
    },
    exporting: {
      filename: mapApp.mapSettings.mapTitles.mapTitle,
      buttons: {
        contextButton: {
          symbol: 'downloadIcon',
          align: 'right',
          verticalAlign: 'bottom',
          symbolX: 12,
          symbolY: 11,
          symbolStrokeWidth: 1.8,
          symbolSize: 20,
          symbolFill: 'none',
          theme: {
            fill: 'rgba(255, 255, 255, 0.0)',
            states: {
              hover: {
                fill: '#f9e11e' // $yellow: '#f9e11e'
              },
              select: {
                fill: '#fdf6bb' // $yellow-light: '#fdf6bb'
              }
            }
          },
          menuItems: [{
            textKey: 'printChart',
            onclick: function () { this.print(); }
          }, {
            separator: true
          }, {
            textKey: 'downloadPNG',
            onclick: function () { this.exportChart(); }
          }, {
            textKey: 'downloadPDF',
            onclick: function () { this.exportChart({ type: 'application/pdf' }); }
          }, {
            textKey: 'downloadSVG',
            onclick: function () { this.exportChart({ type: 'image/svg+xml' }); }
          }, {
            separator: true
          }, {
            textKey: 'downloadCSV',
            onclick: function () {
              // Check for mapping function setName
              if (Highcharts.userFunctions.setName != undefined) {
                Highcharts.userFunctions.setName(this.series);
              }
              this.downloadCSV();
            }
          }, {
            textKey: 'downloadXLS',
            onclick: function () {
              // Check for mapping function setName
              if (Highcharts.userFunctions.setName != undefined) {
                Highcharts.userFunctions.setName(this.series);
              }
              this.downloadXLS();
            }
          }, {
            textKey: 'viewData',
            onclick: function () {
              // Check for mapping function setName
              if (Highcharts.userFunctions.setName != undefined) {
                Highcharts.userFunctions.setName(this.series);
              }
              Highcharts.userFunctions.showDatatable(this);
            }
          }]
        }
      },
      csv: {
        itemDelimiter: ';',
        lineDelimiter: '\r\n',
        decimalPoint: mapApp.hc.translation[mapApp.config.lang].decimalPoint,
        columnHeaderFormatter: function (serie, key, keyLength) {
          if (serie.name != undefined) {
            // console.log('columnHeaderFormatter', serie.name + '-' + key);
            return key;
          } else {
            return 'Gemeente';
          }
        }
      }
    },
    responsive: {
      rules: [
        {
          condition: {
            maxWidth: 500
          },
          chartOptions: {
            chart: { height: 500 },
            title: { style: { fontSize: '13px' } },
            subtitle: { style: { fontSize: '10px' } },
            legend: {
              title: {
                style: {
                  fontSize: '10px',
                  fontWeigth: 'normal'
                }
              },
              itemStyle: {
                fontSize: '9px',
                fontWeight: 'normal'
              }
            },
            credits: { enabled: false }
          }
        }
      ]
    }
  };
  // load theme into Highcharts object
  Highcharts.setOptions(mapApp.hc.theme);
  
}

Highcharts.userFunctions = {
  showDatatable: function (chart) { // Calls chart.viewData and afterwards processes table
    // It is called from chart.events.load and export menu option 'showTable'
    // show table
    chart.viewData();
    // Get and modify container
    var $tableContainer = jQuery('.highcharts-data-table'),
      $table = $tableContainer.find('table');

    // Styling and showing
    $table.addClass('table-striped table');
    $tableContainer.show(); // Show since it may be hidden earlier

    // Add close button with event
    if ($tableContainer.find('button').length == 0) {
      $tableContainer.prepend('<button class="close" title="Verberg tabel">X</button>');
      $tableContainer.find('button.close').focus();
      // Click event button
      $tableContainer.on('click', 'button.close', function (button) {
        jQuery(this).closest('.highcharts-data-table').hide();
      });

      // Add chart title as caption to table
      $table.find('tbody').addClass( chart.userOptions.chart.type == 'map' ? 'map' : 'chart');
      $table.prepend('<caption>' + chart.userOptions.title.text + '</caption');

      // Replace first col header
      $table.find('tr:first-child th:first-child').text($table.find('tr:first-child th:first-child').text().replace('Category', 'Gemeente'))

      // Post process datatable to format values according to chart and tooltip settings
      $table.find('tr:not(:first-child)').each(function () {
        var row = jQuery(this);
        // remove first column if numeric
        row.find('td.number:first-child').remove();
        // row.find('td:last-child').addClass('number');
        row.find('td.number').each(function () {  // :nth-child(2)
          this.textContent = this.textContent.indexOf(".")>-1 ? Highcharts.numberFormat(this.textContent, 1, ',') : this.textContent;
        })
      });

    }
  },
  setName: function (arrSeries) { // set the x prop to the region name
    jQuery.each(arrSeries, function (index, series) {
      if (series.options.includeInCSVExport !== false) {
        jQuery.each(series.points, function (index, datapoint) {
          datapoint.x = datapoint[mapApp.mapSettings.main.data.nameProp];
        });
      }
    })

  }
};

// /*
//   load Highcharts theme with theme param or default theme
// */
// mapApp.hc.loadTheme = function(theme){
//   // Use param or app setting
//   theme = theme || mapApp.hc.theme;
//   // Apply the theme
//   Highcharts.setOptions(theme);
// }

/*
 | Highcharts extend functions
*/
(function (H) {
  // Wrap prototype functions to add extra functionality
  H.wrap(H.Legend.prototype, 'positionItem', function (proceed, item) {
    var legend = this;

    if (item._legendItemPos) {
      if (item.options && item.options.type == 'mapline' && Highcharts.defaultOptions.legend.maplineMarginTop != undefined) {
        item._legendItemPos[1] = item._legendItemPos[1] + (Highcharts.defaultOptions.legend.maplineMarginTop || 0)

        if (item.options.data.length == 0) {
          item._legendItemPos[0] = item._legendItemPos[0] + Highcharts.defaultOptions.legend.maplineMarginLeft || 0;
          item._legendItemPos[1] = item._legendItemPos[1] + (Highcharts.defaultOptions.legend.maplineMarginTop || 0)
        }
      }
      proceed.call(legend, item);
    }
  });

  // Add border around legend symbols
  H.wrap(H.Legend.prototype, 'renderItem', function (proceed, item) {
    var legend = this;

    proceed.call(legend, item);

    if (item.legendSymbol != undefined) {
      jQuery(item.legendSymbol.element).attr({
        'stroke-width': this.chart.options.legend.itemBorderWidth,
        'stroke': this.chart.options.legend.itemBorderColor
      });
    }
  });

}(Highcharts));

// Icons
//download icon
Highcharts.SVGRenderer.prototype.symbols.downloadIcon = function (x, y, w, h) {
  var path = [
    // Arrow stem
    'M', x + w * 0.48, y + h * 0.2,
    'L', x + w * 0.48, y + h * 0.80,
    // Arrow head
    'M', x + w * 0.27, y + h * 0.58,
    'L', x + w * 0.48, y + h * 0.80,
    'L', x + w * 0.69, y + h * 0.58,
    // Box
    'M', x + w * 0.05, y + h * 0.9,
    'L', x + w * 0.05, y + h,
    'L', x + w * 0.95, y + h,
    'L', x + w * 0.95, y + h * 0.9
  ];
  return path;
};
//print icon
Highcharts.SVGRenderer.prototype.symbols.printIcon = function (x, y, w, h) {
  var path = [
    // the printer
    'M', x + w * 0.03, y + h * 0.7,
    'L', x + w * 0.25, y + h * 0.7, x + w * 0.25, y + h * 0.6, x + w * 0.75, y + h * 0.6, x + w * 0.75, y + h * 0.7, x + w * 0.97, y + h * 0.7, x + w * 0.97, y + h * 0.34, x + w * 0.03, y + h * 0.34,
    'Z',
    // the upper sheet
    'M', x + 0.21 * w, y + h * 0.3,
    'L', x + 0.21 * w, y + h * 0.18, x + 0.79 * w, y + h * 0.18, x + 0.79 * w, y + h * 0.3,
    // the lower sheet
    'M', x + w * 0.25, y + h * 0.7,
    'L', x + w * 0.25, y + h * 0.82, x + w * 0.4, y + h * 0.95, x + w * 0.75, y + h * 0.95, x + w * 0.75, y + h * 0.7,
    'M', x + w * 0.25, y + h * 0.82,
    'L', x + w * 0.4, y + h * 0.82, x + w * 0.4, y + h * 0.95,
  ];
  return path;
};